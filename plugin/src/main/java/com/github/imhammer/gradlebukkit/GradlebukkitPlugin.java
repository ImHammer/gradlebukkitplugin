/*
 * This source file was generated by the Gradle 'init' task
 */
package com.github.imhammer.gradlebukkit;

import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.language.jvm.tasks.ProcessResources;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

/**
 * A simple 'hello world' plugin.
 */
public class GradlebukkitPlugin implements Plugin<Project>
{
    public void apply(Project project)
    {
        final GradlebukkitExtension bukkitPluginConfig = project.getExtensions().create("bukkitpulugin", GradlebukkitExtension.class);
        final File pluginBuildDir = new File(project.getLayout().getBuildDirectory().get().getAsFile(), "bukkitPlugin");

        Task generateBukkitYaml = project.getTasks().register("generateBukkitYaml", task -> {

            task.getOutputs().dir(pluginBuildDir);

            // Declare as propriedades do plugin como inputs
            task.getInputs().property("main", bukkitPluginConfig.getMain());
            task.getInputs().property("name", bukkitPluginConfig.getName());
            task.getInputs().property("version", bukkitPluginConfig.getVersion());
            task.getInputs().property("description", bukkitPluginConfig.getDescription()).optional(true);
            task.getInputs().property("apiVersion", bukkitPluginConfig.getApiVersion()).optional(true);
            task.getInputs().property("load", bukkitPluginConfig.getLoad()).optional(true);
            task.getInputs().property("authors", bukkitPluginConfig.getAuthors()).optional(true);
            task.getInputs().property("website", bukkitPluginConfig.getWebsite()).optional(true);
            task.getInputs().property("depends", bukkitPluginConfig.getDepends()).optional(true);
            task.getInputs().property("prefix", bukkitPluginConfig.getPrefix()).optional(true);
            task.getInputs().property("softDepends", bukkitPluginConfig.getSoftDepends()).optional(true);
            task.getInputs().property("laodBefore", bukkitPluginConfig.getLoadBefore()).optional(true);
            task.getInputs().property("libraries", bukkitPluginConfig.getLibraries()).optional(true);

            task.doLast(t -> {
                try {
                    if (!pluginBuildDir.exists()) {
                        project.getLogger().lifecycle("Created build dir %s".formatted(pluginBuildDir.getAbsolutePath()));
                        pluginBuildDir.mkdirs();
                    }

                    if (
                        !bukkitPluginConfig.getMain().isPresent() ||
                        !bukkitPluginConfig.getName().isPresent() ||
                        !bukkitPluginConfig.getVersion().isPresent()
                    ) {
                        throw new NullPointerException("main, name, version cannot be null!");
                    }

                    Map<String, Object> pluginYml = new LinkedHashMap<>();
                    pluginYml.put("main", bukkitPluginConfig.getMain().getOrElse("not-found"));
                    pluginYml.put("name", bukkitPluginConfig.getName().getOrElse("not-found"));
                    pluginYml.put("version", bukkitPluginConfig.getVersion().getOrElse("not-found"));

                    if (bukkitPluginConfig.getDescription().isPresent()) {
                        pluginYml.put("description", bukkitPluginConfig.getDescription().get());
                    }
                    if (bukkitPluginConfig.getApiVersion().isPresent()) {
                        pluginYml.put("api-version", bukkitPluginConfig.getApiVersion().get());
                    }
                    if (bukkitPluginConfig.getLoad().isPresent()) {
                        pluginYml.put("load", bukkitPluginConfig.getLoad().get().name());
                    }
                    if (bukkitPluginConfig.getAuthors().get().size() > 0) {
                        List<String> authors = bukkitPluginConfig.getAuthors().get();
                        if (authors.size() > 1) {
                            pluginYml.put("authors", authors);
                        } else {
                            pluginYml.put("author", authors.stream().findFirst().orElseGet(() -> "not-found"));
                        }
                    }
                    if (bukkitPluginConfig.getDepends().get().size() > 0) {
                        pluginYml.put("depend", bukkitPluginConfig.getDepends().get());
                    }
                    if (bukkitPluginConfig.getPrefix().isPresent()) {
                        pluginYml.put("prefix", bukkitPluginConfig.getPrefix().get());
                    }
                    if (bukkitPluginConfig.getSoftDepends().get().size() > 0) {
                        pluginYml.put("softdepend", bukkitPluginConfig.getSoftDepends().get());
                    }
                    if (bukkitPluginConfig.getLoadBefore().get().size() > 0) {
                        pluginYml.put("loadbefore", bukkitPluginConfig.getLoadBefore().get());
                    }
                    if (bukkitPluginConfig.getLibraries().get().size() > 0) {
                        pluginYml.put("libraries", bukkitPluginConfig.getLibraries().get());
                    }

                    if (bukkitPluginConfig.getCommands().isPresent()) {
                        List<GradlebukkitExtension.Command> commands = bukkitPluginConfig.getCommands().get();
                        if (commands.size() > 0) {
                            Map<String, Map<String, Object>> ymlCommands = new LinkedHashMap<>();

                            for (GradlebukkitExtension.Command cmd : commands) {
                                Map<String, Object> cmdConfig = new LinkedHashMap<>();
                                
                                if (
                                    !cmd.getName().isPresent() || 
                                    !cmd.getDescription().isPresent()
                                ) {
                                    throw new NullPointerException("Error on configure command %s because the command name or description is null!");
                                }
                                
                                cmdConfig.put("description", cmd.getDescription().get());

                                if (cmd.getAliases().get().size() > 1) {
                                    cmdConfig.put("aliases", cmd.getAliases().get());
                                }
                                if (cmd.getPermission().isPresent()) {
                                    cmdConfig.put("permission", cmd.getPermission().get());
                                }
                                if (cmd.getPermissionMessage().isPresent()) {
                                    cmdConfig.put("permission-message", cmd.getPermissionMessage().get());
                                }
                                if (cmd.getUsage().isPresent()) {
                                    cmdConfig.put("usage", cmd.getUsage().get());
                                }

                                ymlCommands.put(cmd.getName().get(), cmdConfig);
                            }

                            pluginYml.put("commands", ymlCommands);
                        }
                    }

                    if (bukkitPluginConfig.getPermissions().isPresent()) {
                        List<GradlebukkitExtension.Permission> permissions = bukkitPluginConfig.getPermissions().get();
                        List<GradlebukkitExtension.PermissionChild> permissionsChildren = bukkitPluginConfig.getPermissionsChildren().getOrElse(new ArrayList<>());
                        
                        if (permissions.size() > 0) {
                            Map<String, Map<String, Object>> ymlPermissions = new LinkedHashMap<>();

                            for (GradlebukkitExtension.Permission perm : permissions) {
                                Map<String, Object> permConfig = new LinkedHashMap<>();
                                if (
                                    !perm.getName().isPresent() || 
                                    !perm.getDefType().isPresent()
                                ) {
                                    throw new NullPointerException("Error on configure command %s because the command name or default is null!");
                                }

                                permConfig.put("default", perm.getDefType().get().toRaw());

                                if (perm.getDescription().isPresent()) {
                                    permConfig.put("description", perm.getDescription().get());
                                }

                                if (permissionsChildren.size() > 0) {

                                    @SuppressWarnings("unchecked")
                                    Map<String, Object> children = (Map<String, Object>) permConfig.getOrDefault("children", new HashMap<>());

                                    for (GradlebukkitExtension.PermissionChild permChild : permissionsChildren) {
                                        if (permChild.getParent().get().equals(perm.getName().get())) {

                                            children.put(permChild.getName().get(), permChild.getDefType().get().toRaw());
                                        }
                                    }
                                    if (children.size() > 0) {
                                        permConfig.put("children", children);
                                    }
                                } 

                                ymlPermissions.put(perm.getName().get(), permConfig);
                            }

                            pluginYml.put("permissions", ymlPermissions);
                        }
                    }

                    DumperOptions options = new DumperOptions();
                    options.setPrettyFlow(true);
                    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);

                    Yaml yaml = new Yaml(options);
                    String ymlContent = yaml.dump(pluginYml);

                    File file = new File(pluginBuildDir, "plugin.yml");
                    Files.writeString(file.toPath(), ymlContent);
                    project.getLogger().lifecycle("Created plugin.yml: " + file.getAbsolutePath());
                } catch (Exception e) {
                    throw new RuntimeException("Error on create plugin yml bukkit", e);
                }
            });
        }).get();

        project.getTasks().named("processResources", ProcessResources.class).configure(jar -> {
            // Garante que o arquivo seja criado antes do ProcessResources
            jar.dependsOn(generateBukkitYaml).doFirst(task -> {
                jar.from(project.provider(() -> {
                    File generatedFile = new File(pluginBuildDir, "plugin.yml");
                    
                    if (!generatedFile.exists()) {
                        project.getLogger().error("plugin.yml not found in: %s".formatted(generatedFile.getAbsolutePath()));
                        return null;
                    }
                    return generatedFile;
                }));
            });
        });
    }
}
